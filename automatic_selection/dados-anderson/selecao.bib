@Article{
	title={Automatic deformations detection in internet interfaces: ADDII},
	abstract={Developers have been trying to create uniform and consistent webpages in the different browsers available in the market. Known as Crossbrowser issue, it affects pages in different ways, on its functionalities and visually aspects and sometimes not related to the source code. Using screenshot and image comparison algorithms, this paper presents a technique for automated detection of visual deformations in web pages using a tool developed during the research called Automatic Deformations Detection in Internet Interfaces (ADDII).},
	year={2015},
	database={Seed Set}
}

@Article{
	title={Cross-browser compatibility testing based on model comparison},
	abstract={As Web applications are more widely used and the browser and operating system becomes more diversiform, cross-browser incompatibility becomes more and more serious which may lead to visual faults or malfunction. The existing tools are difficult to pinpoint incompatibility. We propose a model comparison-based compatibility testing method. CRAWLJAX, an open source crawler tool, is used to build the behavioral model of the Web application under testing. Two models are generated by crawling the application in the reference browser and the target browser respectively, and then they are compared to find and locate incompatibility issues. It reduces the workload of the test and repair. Finally, we use a simple example to illustrate our approach.},
	year={2015},
	database={Seed Set}
}

@Article{
	title={Static Analysis Technique of Cross-Browser Compatibility Detecting},
	abstract={Web application developers have been bothered about cross-browser compatibility problems caused by different kinds of web browsers. Existing techniques and tools commonly compare and analyze screenshots of websites rendering in different browsers. In this paper, we propose a technique for statically analyzing cross-browser compatibility problems. Our approach can easily detect whether web applications contain HTML5 incompatible features and generate a report containing the HTML5 incompatible features in the website for developers.},
	year={2015},
	database={Seed Set}
}

@Article{
	title={Adaptive random testing for comparison, in regression web testing},
	abstract={Web applications have become the most popular type of software in the past decade, attracting the attention of both the academia and the industry. In parallel with their popularity, the complexity of aesthetics and functionality of web applications have also increased significantly, creating a big challenge for maintenance and cross-browser compliance testing. Since such testing and verification activities require visual analysis, web application testing has not been sufficiently automated. In this paper, we propose a novel pairwise image comparison approach suitable for web application testing where the location of layout faults needs to be detected efficiently while insignificant variations being neglected. This technique is developed based on the characteristics of fault patterns of browser layouts. An empirical study conducted with the industry partner shows our approach is more effective and efficient than existing methods in this area.},
	year={2014},
	database={Seed Set}
}

@Article{
	title={Cross-browser testing in Browserbite},
	abstract={Cross-browser compatibility testing aims at verifying that a web page is rendered as intended by its developers across multiple browsers and platforms. Browserbite is a tool for cross-browser testing based on comparison of screenshots with the aim of identifying differences that a user may perceive as incompatibilities. Browserbite is based on segmentation and image comparison techniques adapted from the field of computer vision. The key idea is to first extract web page regions via segmentation and then to match and compare these regions pairwise based on geometry and pixel density distribution. Additional accuracy is achieved by post-processing the output of the region comparison step via supervised machine learning techniques. In this way, compatibility checking is performed based purely on screenshots rather than relying on the Document Object Model (DOM), an alternative that often leads to missed incompatibilities. Detected incompatibilities in Browserbite are overlaid on top of screenshots in order to assist users during cross-browser testing.},
	year={2014},
	database={Seed Set}
}

@Article{
	title={Modeling web application for cross-browser compatibility testing},
	abstract={Due to the increasing popularity of web applications and modern browsers, the cross-browser compatibility issues are becoming a prevalent problem. Cross-browser incompatibilities range from minor differences in appearance to critical functional failures. Existing tools and techniques hardly help developer to detect such issues exactly. This paper presents a model of interaction transition (ITM) to characterize the behavior of web pages containing interactions, and gives the relevant definitions and constraints. Finally, we illustrate its effectiveness in detecting CBC interaction problems by analyzing a case.},
	year={2014},
	database={Seed Set}
}

@Article{
	title={WebMate: web application test generation in the real world},
	abstract={We present Web Mate, a tool for automatically generating test cases for Web applications. Given only the URL of the starting page, Web Mate automatically explores the functionality of a Web application, detecting differences across multiple browsers or operating systems, as well as across different revisions of the same Web application. Web Mate can handle full Web 2.0 functionality and explore sites as complex as Facebook. In addition to autonomously exploring the application, Web Mate can also leverage existing written or recorded test cases, and use these as an exploration base, this combination allows for quick expansion of the existing test base. Originating from research in generating test cases for specification mining, Web Mate is now the core product of a startup specializing in automated Web testing - a transfer that took us two years to complete. We report central lessons learned from this transfer, reflecting how robust, versatile, and pragmatic an innovative tool must be to be a success in the marketplace.},
	year={2014},
	database={Seed Set}
}

@Article{
	title={X-Pert: A web application testing tool for, cross-browser inconsistency detection},
	abstract={Web applications are popular among developers because of the ease of development and deployment through the ubiquitous web browsing platform. However, differences in a web application's execution across different web browsers manifest as Cross-browser Inconsistencies (XBIs), which are a serious concern for web developers. Testing for XBIs manually is a laborious and error-prone process. In this demo we present X-PERT, which is a tool to identify XBIs in web applications automatically, without requiring any effort from the developer. X-PERT implements a comprehensive technique to identify XBIs and has been found to be effective in detecting real-world XBIs in our empirical evaluation. The source code of X-PERT and XBI reports from our evaluation are available at http://gatech.github.io/xpert.},
	year={2014},
	database={Seed Set}
}

@Article{
	title={Browserbite: Accurate cross-browser testing, via machine learning over image features},
	abstract={Cross-browser compatibility testing is a time consuming and monotonous task. In its most manual form, Web testers open Web pages one-by-one on multiple browser-platform combinations and visually compare the resulting page renderings. Automated cross-browser testing tools speed up this process by extracting screenshots and applying image processing techniques so as to highlight potential incompatibilities. However, these systems suffer from insufficient accuracy, primarily due to a large percentage of false positives. Improving accuracy in this context is challenging as the criteria for classifying a difference as an incompatibility are to some extent subjective. We present our experience building a cross-browser testing tool (Browser bite) based on image segmentation and differencing in conjunction with machine learning. An experimental evaluation involving a dataset of 140 pages, each rendered in 14 browser-system combinations, shows that the use of machine learning in this context leads to significant accuracy improvement, allowing us to attain an F-score of over 90%.},
	year={2013},
	database={Seed Set}
}

@Article{
	title={WebMate generating test cases, for web 2.0},
	abstract={Web applications are everywhere—well tested web applications however are in short supply. The mixture of JavaScript, HTML and CSS in a variety of different browsers makes it virtually impossible to apply static analysis techniques. In this setting, systematic testing becomes a real challenge. We present a technique to automatically generate tests for Web 2.0 applications. Our approach systematically explores and tests all distinct functions of a web application. Our prototype implementation WEBMATE handles interfaces as complex as Facebook and is able to cover up to 7 times as much code as existing tools. The only requirements to use WEBMATE are the address of the application and, if necessary, user name and password.},
	year={2013},
	database={Seed Set}
}

@Article{
	title={X-Pert: Accurate identiﬁcation of cross-browser issues in web applications},
	abstract={Due to the increasing popularity of web applications, and the number of browsers and platforms on which such applications can be executed, cross-browser incompatibilities (XBIs) are becoming a serious concern for organizations that develop web-based software. Most of the techniques for XBI detection developed to date are either manual, and thus costly and error-prone, or partial and imprecise, and thus prone to generating both false positives and false negatives. To address these limitations of existing techniques, we developed X-PERT, a new automated, precise, and comprehensive approach for XBI detection. X-PERT combines several new and existing differencing techniques and is based on our findings from an extensive study of XBIs in real-world web applications. The key strength of our approach is that it handles each aspects of a web application using the differencing technique that is best suited to accurately detect XBIs related to that aspect. Our empirical evaluation shows that X-PERT is effective in detecting real-world XBIs, improves on the state of the art, and can provide useful support to developers for the diagnosis and (eventually) elimination of XBIs.},
	year={2013},
	database={Seed Set}
}

@Article{
	title={CrossCheck: Combining crawling and differencing to better detect crossbrowser incompatibilities in web applications},
	abstract={One of the consequences of the continuous and rapid evolution of web technologies is the amount of inconsistencies between web browsers implementations. Such inconsistencies can result in cross-browser incompatibilities (XBIs)-situations in which the same web application can behave differently when run on different browsers. In some cases, XBIs consist of tolerable cosmetic differences. In other cases, however, they may completely prevent users from accessing part of a web application's functionality. Despite the prevalence of XBIs, there are hardly any tools that can help web developers detect and correct such issues. In fact, most existing approaches against XBIs involve a considerable amount of manual effort and are consequently extremely time consuming and error prone. In recent work, we have presented two complementary approaches, WEBDIFF and CROSST, for automatically detecting and reporting XBIs. In this paper, we present CROSSCHECK, a more powerful and comprehensive technique and tool for XBI detection that combines and adapts these two approaches in a way that leverages their respective strengths. The paper also presents an empirical evaluation of CROSSCHECK on a set of real-world web applications. The results of our experiments show that CROSSCHECK is both effective and efficient in detecting XBIs, and that it can outperform existing techniques.},
	year={2012},
	database={Seed Set}
}

@Article{
	title={WebMate: A tool for testing web 2.0, applications},
	abstract={Quality assurance of Web applications is a challenge, due to the large number and variance of involved components. In particular, rich Web 2.0 applications based on JavaScript pose new challenges for testing, as a simple crawling through links covers only a small part of the functionality. The WEBMATE approach automatically explores and navigates through arbitrary Web 2.0 applications. WEBMATE addresses challenges such as interactive elements, state abstraction, and non-determinism in large applications; we demonstrate its usage for regular application testing as well as for cross-browser testing.},
	year={2012},
	database={Seed Set}
}

@Article{
	title={Automated cross-browser compatibility testing},
	abstract={With the advent of Web 2.0 applications and new browsers, the cross-browser compatibility issue is becoming increasingly important. Although the problem is widely recognized among web developers, no systematic approach to tackle it exists today. None of the current tools, which provide screenshots or emulation environments, specifies any notion of cross-browser compatibility, much less check it automatically. In this paper, we pose the problem of cross-browser compatibility testing of modern web applications as a 'functional consistency' check of web application behavior across different web browsers and present an automated solution for it. Our approach consists of (1) automatically analyzing the given web application under different browser environments and capturing the behavior as a finite-state machine; (2) formally comparing the generated models for equivalence on a pairwise-basis and exposing any observed discrepancies. We validate our approach on several open-source and industrial case studies to demonstrate its effectiveness and real-world relevance.},
	year={2011},
	database={Seed Set}
}

@Article{
	title={Detecting cross-browser issues in web applications},
	abstract={Cross-browser issues are prevalent in web applications. However, existing tools require considerable manual effort from developers to detect such issues. Our technique and prototype tool - WEBDIFF detects such issues automatically and reports them to the developer. Along with each issue reported, the tool also provides details about the affected HTML element, thereby helping the developer to fix the issue. WEBDIFF is the first technique to apply concepts from computer vision and graph theory to identify cross-browser issues in web applications. Our results show that WEBDIFF is practical and can find issues in real world web applications.},
	year={2011},
	database={Seed Set}
}

@Article{
	title={A cross-browser web application testing tool},
	abstract={Web applications have gained increased popularity in the past decade due to the ubiquity of the web browser across platforms. With the rapid evolution of web technologies, the complexity of web applications has also grown, making maintenance tasks harder. In particular, maintaining cross-browser compliance is a challenging task for web developers, as they must test their application on a variety of browsers and platforms. Existing tools provide some support for this kind of test, but developers are still required to identify and fix cross-browser issues mainly through manual inspection. Our WEBDIFF tool addresses the limitations of existing tools by (1) automatically comparing the structural and visual characteristics of web pages when they are rendered in different browsers, and (2) reporting potential differences to developers. When used on nine real web pages, WEBDIFF automatically identified 121 issues, out of which 100 were actual problems. In this demo, we will present WEBDIFF, its underlying technology, and several examples of its use on real applications.},
	year={2010},
	database={Seed Set}
}

@Article{
	title={WebDiff: Automated identiﬁcation of cross-browser issues in web applications},
	abstract={Cross-browser (and cross-platform) issues are prevalent in modern web based applications and range from minor cosmetic bugs to critical functional failures. In spite of the relevance of these issues, cross-browser testing of web applications is still a fairly immature field. Existing tools and techniques require a considerable manual effort to identify such issues and provide limited support to developers for fixing the underlying cause of the issues. To address these limitations, we propose a technique for automatically detecting cross-browser issues and assisting their diagnosis. Our approach is dynamic and is based on differential testing. It compares the behavior of a web application in different web browsers, identifies differences in behavior as potential issues, and reports them to the developers. Given a page to be analyzed, the comparison is performed by combining a structural analysis of the information in the page's DOM and a visual analysis of the page's appearance, obtained through screen captures. To evaluate the usefulness of our approach, we implemented our technique in a tool, called WEBDIFF, and used WEBDIFF to identify cross-browser issues in nine real web applications. The results of our evaluation are promising, in that WEBDIFF was able to automatically identify 121 issues in the applications, while generating only 21 false positives. Moreover, many of these false positives are due to limitations in the current implementation of WEBDIFF and could be eliminated with suitable engineering.},
	year={2010},
	database={Seed Set}
}

@Article{
	title={Automatic detection of cross-browser incompatibilities using machine learning and screenshot similarity: student research abstract},
	abstract={Cross Browser Incompatibilities (XBIs) stands for compatibility issues which can be observed while rendering the same Web application in different browsers. The increasing number of browser implementations and the continuous evolving characteristic of Web technologies, lead to differences in how browsers behave and render Web applications. Every element of a Web application should be correctly rendered and present the same behavior, despite the Web browser implementation, version, or OS which is used by users [1]. In order to overcome this issue during the Web Engineering process, developers must detect and fix XBIs before deploying Web applications, regardless of the effort and cost required to conduct these inspections. This research has the goal of elaborating an approach for automatically detecting XBIs in Web applications, using machine learning (supervised learning algorithms) and screenshot similarity to detect XBIs. Next section presents the related work of this research.},
	year={2017},
	database={Google Scholar}
}

@Article{
	title={Automated repair of layout cross browser issues using search-based techniques},
	abstract={A consistent cross-browser user experience is crucial for the success of a website. Layout Cross Browser Issues (XBIs) can severely undermine a website�s success by causing web pages to render incorrectly in certain browsers, thereby negatively impacting users� impression of the quality and services that the web page delivers. Existing Cross Browser Testing (XBT) techniques can only detect XBIs in websites. Repairing them is, hitherto, a manual task that is labor intensive and requires significant expertise. Addressing this concern, our paper proposes a technique for automatically repairing layout XBIs in websites using guided search-based techniques. Our empirical evaluation showed that our approach was able to successfully fix 86\% of layout XBIs reported for 15 different web pages studied, thereby improving their cross-browser consistency.},
	year={2017},
	database={ACM Digital Library}
}

@Article{
	title={Improved Developer Support for the Detection of Cross-Browser Incompatibilities},
	abstract={Various tools are available to help developers detect cross-browser incompatibilities (XBIs) by testing the documents generated by their code. We propose an approach that enables XBIs to be detected earlier in the development cycle by providing support in the IDE as the code is being written. This has the additional advantage of making it clear to the developers where the sources of the problems are and how to fix them. We present wIDE which is an extension to an IDE designed specifically to support web developers. wIDE uses a compatibility knowledge base to scan the source code for XBIs. The knowledge base is extracted automatically from online resources and periodically updated to ensure that the compatibility information is always up-to-date. In addition, developers can query documentation from within the IDE to access descriptions and usage examples of code statements. We report on a qualitative user study where developers provided positive feedback about the approach, but raised some issues to address in future work.},
	year={2017},
	database={Google Scholar}
}

@Article{
	title={Cross-Browser Compatibility Testing of Web Applications},
	abstract={Recently, technologies of web applications and web browser are becoming more complex, which causes different issues on different web browsers. Although there are many cross-browser detection tools on the market, all of them mainly focus on the front-end, and they are lack of detection on web page exploring and cross-browser issues detecting. The purpose of this research is to track the web applications structure and find their cross-browser issues.  This research first defines and classifies cross-browser issues, purposes the browser debugger XB-tester, collects data through cross-browser crawling technologies, and finally analyzes cross-browser issues and displays error reports.  Web developers can use this tool to effectively reduce the human cost to achieve cross-browser automation testing purposes.},
	year={2017},
	database={Google Scholar}
}

@Article{
	title={Detection of Cross Browser Inconsistency by Comparing Extracted Attributes},
	abstract={Abstract�The advancement in web technology and popularity of web applications amplifies the inconsistencies
	between various web browsers. These inconsistencies augment cross browser incompatibilities that constitute different
	look on different browsers for a particular web application. In some cases, Cross-Browser Inconsistencies (XBIs)
	consists of acceptable difference whereas these may entirely prevent users from accessing part of a web application�s
	functionality in other cases. Therefore, testing process of a web application must be performed comprehensively on
	multiple browsers to achieve consistency. Available tools and techniques require a considerable manual effort to
	recognize such issues and provide limited support for fixing the cause of the issues. In this paper, we propose a
	technique for detecting cross-browser issues without human intervention.},
	year={2017},
	database={Google Scholar}
}

@Article{
	title={Webpage cross-browser test from image level},
	abstract={Incompatibility of webpages under different browsers and platforms is a typical technical obstruction for webpage design. To address this issue, a key challenge is to automatically detect the incompatible components and quantitatively assess the distortion extent in cross-browser tests. This paper presents a new algorithm for image pair comparison from webpages, called iterative perceptual hash (IPH), as well as a new distortion evaluation index called structure-color-saliency (SCS). The IPH that operates in an iterative manner is proposed to detect content changes considering both global structure and local content difference. The SCS assesses the distortion extent in both dimensions of image structure and color and is capable of imitating the nonlinear human perception. Experiment results demonstrate the effectiveness of IPH (e.g., F1-score 96\%) and the high consistency of SCS with subjective results.},
	year={2017},
	database={Google Scholar}
}

@Article{
	title={XFix: an automated tool for the repair of layout cross browser issues},
	abstract={Differences in the rendering of a website across different browsers can cause inconsistencies in its appearance and usability, resulting in Layout Cross Browser Issues (XBIs). Such XBIs can negatively impact the functionality of a website as well as users� impressions of its trustworthiness and reliability. Existing techniques can only detect XBIs, and therefore require developers to manually perform the labor intensive task of repair. In this demo paper we introduce our tool, XFix, that automatically repairs layout XBIs in web applications. To the best of our knowledge, XFix is the first automated technique for generating XBI repairs.},
	year={2017},
	database={Google Scholar}
}

@Article{
	title={An Automated Approach for Cross-Browser Inconsistency (XBI) Detection},
	abstract={Due to the spread of the internet and the ever increasing number of web applications, the issue of compatibility across browsers has become very important. This compatibility issue is also referred as Cross Browser Inconsistency (XBI) wherein same website looks or behaves differently in different web browsers. In this paper our aim is to address this issue of compatibility and propose an automated approach of detecting XBIs. Cross Browser Inconsistencies can either be in the content, structure or behavior of the webpage. In order to get a grasp of the above mentioned types of inconsistencies, we surveyed some random websites and analyzed them in different browsers. We also studied the basic working of browser, in order to establish its connection with the occurrences of XBIs. Each browser has its own rendering mechanisms, which sometimes differs from standards. Hence, the execution of these websites is different in different browsers. Finally we have proposed an automated approach for XBI detection.},
	year={2016},
	database={Google Scholar}
}

@Article{
	title={Analysis and Identification of Cross Browser Inconsistency Issues in Web Application using Automation Testing},
	abstract={Abstract� Web technologies of inconsistency and Web
	standards it to be consistent with different web technology
	evolution, Web application developers has been broadly rang
	of face on the different certain problem . Web applications
	become difficult part for them to keep track problem of their
	web correctly rendered across broad range of browsers and
	platforms. It kind of cross-browser inconsistency (XBI),
	developers are keep checking that document and platform
	produced by the web application is appropriate pass the across
	every useful browser-platform so many combinations. It take the
	requires more than execution time and error results in web
	application. This web cross-browser inconsistency existing
	testing tools for speed up the process of automating and the
	rendering of a document in cross browsers and different
	platforms, and using either image analysis, and Document
	Object Model (DOM) analysis to the feature of cross-browser
	inconsistency. This dissertation are comparisons of the problem
	of cross-browser inconsistency testing with the modern web
	applications and their functionality check the accuracy of web
	application�s behavior with different different web browsers
	and their present a solution. In the reasons of cross-browser
	inconsistency issues and their so many solutions to them are been
	presented feature different cross-browser inconsistency.
	Proposed solution has been used the concept of Automation
	Testing using Behavioral methodology of the web application on
	different browsers such as Firefox, Internet Explorer and Google
	Chrome. For the test bed selenium and TestNG variation has
	been integrated onto the eclipse java environment. Obtained
	results has proven that the proposed XBI validation method
	outperform and provides the cost effective solution instead of
	paying high cost to other testing service provider lie �Browserstack�.},
	year={2016},
	database={Google Scholar}
}

@Article{
	title={Browserbite: cross-browser testing via image processing},
	abstract={Cross-browser compatibility testing is concerned with identifying perceptible differences in the way a Web page is rendered across different browsers or configurations thereof. Existing automated cross-browser compatibility testing methods are generally based on document object model (DOM) analysis, or in some cases, a combination of DOM analysis with screenshot capture and image processing. DOM analysis, however, may miss incompatibilities that arise not during DOM construction but rather during rendering. Conversely, DOM analysis produces false alarms because different DOMs may lead to identical or sufficiently similar renderings. This paper presents a novel method for cross-browser testing based purely on image processing. The method relies on image segmentation to extract �regions� from a Web page and computer vision techniques to extract a set of characteristic features from each region. Regions extracted from a screenshot taken on a baseline browser are compared against regions extracted from the browser under test based on characteristic features. A machine learning classifier is used to determine if differences between two matched regions should be classified as an incompatibility. An evaluation involving 140 pages shows that the proposed method achieves an F-score exceeding 90\%, outperforming a state-of-the-art cross-browser testing tool based on DOM analysis.},
	year={2016},
	database={Google Scholar}
}

@Article{
	title={Detecção Automática de Incompatibilidades Cross-Browser utilizando Redes Neurais Artificiais},
	abstract={Cross-Browser Incompatibilities (XBIs) represent inconsistencies in Web Application when introduced in different browsers. The growing number of implementation of browsers (Internet Explorer, Microsoft Edge, Mozilla Firefox, Google Chrome) and the constant evolution of the specifications of Web technologies provided differences in the way that the browsers behave and render the web pages. The web applications must behave consistently among browsers. Therefore, the web developers should overcome the differences that happen during the rendering in different environments by detecting and avoiding XBIs during the development process. Many web developers depend on manual inspection of web pages in several environments to detect the XBIs, independently of the cost and time that the manual tests represent to the process of development. The tools for the automatic detection of the XBIs accelerate the inspection process in the web pages, but the current tools have little precision, and their evaluations report a large percentage of false positives. This search aims to evaluate the use of Artificial Neural Networks for reducing the numbers of false positives in the automatic detection of the XBIs through the CSS (Cascading Style Sheets) and the relative comparison of the element in the web page.},
	year={2016},
	database={Google Scholar}
}

@Article{
	title={Detect Cross-Browser Issues for JavaScript-Based Web Applications Based on Record/Replay},
	abstract={With the advent of Web 2.0 application, and the increasing number of browsers and platforms on which the applications can be executed, cross-browser incompatibilities (XBIs) are becoming a serious problem for organizations to develop web-based software. Although some techniques and tools have been proposed to identify XBIs, a number of false positives and false negatives still exist as they cannot assure the same execution when the application runs across different browsers. To address this limitation, leveraging existing record/replay technique, we developed X-Check, a novel cross-browser testing technique and tool, which supports automated XBIs detection with high accuracy. Our empirical evaluation shows that X-Check is effective and improves the state of the art.},
	year={2016},
	database={Google Scholar}
}

@Article{
	title={X-Check: A Novel Cross-Browser Testing Service Based on Record/Replay},
	abstract={With the advent of Web 2.0 application, and the increasing number of browsers and platforms on which the applications can be executed, cross-browser incompatibilities (XBIs) are becoming a serious problem for organizations to develop web-based software. Although some techniques and tools have been proposed to identify XBIs, they cannot assure the same execution when the application runs across different browsers as only explicit user activity is considered, and thus prone to generating both false positives and false negatives. To address this limitation, this paper describes X-Check, a platform that enables cross-browser testing as a service by leveraging record/replay technique. Comparing to existing techniques and tools, X-Check supports to detect cross-browser issues with high accuracy. It also provides useful support to developers for diagnosis and (eventually) elimination of XBIs. Our empirical evaluation shows that X-Check is effective, improves the state of the art.},
	year={2016},
	database={Google Scholar}
}

@Article{
	title={Browser and operating system compatibility},
	abstract={A browser and operating system (OS) compatibility system may include a user interface to select a first combination of a browser and OS for comparison to a second combination of a browser and OS. A download engine may capture source files for browsers for the first and second combinations. A parse engine may create Document Object Model (DOM) trees of objects of first and second website pages respectively for the browsers for the first and second combinations. A metric engine may read the DOM trees for attributes of the objects to capture metrics of the objects. An analysis metric engine may compare a metric of an object of the first website page to a metric of the same object of the second website page to determine a compatibility of the browser and the OS for the first combination to the browser and the OS for the second combination.},
	year={2015},
	database={Browser and operating system compatibility}
}

@Article{
	title={Determining differences in an event-driven application accessed in different client-tier environments},
	abstract={In one embodiment, a method includes dynamically crawling an event-driven application in a plurality of client-tier environments; for each of the client-tier environments, generating a behavioral model of the event-driven application based on the dynamic crawling; for each of the behavioral models, determining one or more pairwise equivalences with respect to one or more other ones of the behavioral models; and, for each of the client-tier environments, determining one or more differences in an end-user experience of the event-driven application in the client-tier environment with respect to one or more other end-user experiences of the event-driven application in one or more other ones of the client-tier environments.},
	year={2015},
	database={Google Scholar}
}

@Article{
	title={Online application testing across browser environments},
	abstract={A stub can be loaded into a first browser environment of a browser application on a client machine, with the stub being loaded from a domain. The stub can execute to load an online application test into the first browser environment. Additionally, the test can execute in the first browser environment to conduct the test on an online application. For example, the test may be conducted from a second browser environment of the browser on the client machine. Performing the test can include loading one or more digital pages from the application into the second browser environment.},
	year={2015},
	database={Google Scholar}
}

@Article{
	title={TESTAR: Tool Support for Test Automation at the User Interface Level},
	abstract={Testing applications with a graphical user interface (GUI) is an important, though challenging and time consuming task. The state of the art in the industry are still capture and replay tools, which may simplify the recording and execution of input sequences, but do not support the tester in finding fault-sensitive test cases and leads to a huge overhead on maintenance of the test cases when the GUI changes. In earlier works the authors presented the TESTAR tool, an automated approach to testing applications at the GUI level whose objective is to solve part of the maintenance problem by automatically generating test cases based on a structure that is automatically derived from the GUI. In this paper they report on their experiences obtained when transferring TESTAR in three different industrial contexts with decreasing involvement of the TESTAR developers and increasing participation of the companies when deploying and using TESTAR during testing. The studies were successful in that they reached practice impact, research impact and give insight into ways to do innovation transfer and defines a possible strategy for taking automated testing tools into the market.},
	year={2015},
	database={Google Scholar}
}

@Article{
	title={Web service for automated cross-browser compatibility checking of web applications},
	abstract={One embodiment presents a user interface to a first user, the user interface being configured to enable the first user to provide user input that: specifies a first web application, and a behavior exploration specification, a plurality of web browsers, and a set of comparison rules for the first web application; requests a plurality of models to be constructed with respect to the web browsers for the first web application based on the behavior exploration specification; requests the models of the first web application to be compared with each other based on the set of comparison rules; and requests one or more results of the comparison performed on the models of the first web application to be presented; and in response to each user input received from the first user, performs one or more operations for the first user.},
	year={2015},
	database={Google Scholar}
}

@Article{
	title={Automatic test tool for webpage design with micro-browsers on mobile platforms},
	abstract={Architecture that provides a convenient and effective test tool for testing and ensuring that webpages using micro-browsers are sufficiently designed and operational. A task library is developed for manipulating browsers on a handheld device, and includes one or more seamless methods that operate the different browsers in the same way. Seamless virtual functions that manipulate different micro-browsers include, but are not limited to browser launch, exiting a browser, navigating to a home page, clearing a cache, navigating to a webpage, reloading a webpage, getting the current info for a webpage, navigating back to a webpage, checking a page title, and capturing a screen, for example. Device features can also be manipulated to ensure consistency across the testing process.},
	year={2014},
	database={Google Scholar}
}

@Article{
	title={Cross-platform testing and maintenance of web and mobile applications},
	abstract={Modern software applications need to run on a variety of web and mobile platforms with diverse software and hardware-level features. Thus, developers of such software need to duplicate the testing and maintenance effort on a wide range of platforms. Often developers are not able to cope with this increasing demand and release software that is broken on certain platforms, thereby affecting a class of customers using such platforms. Hence, there is a need for automating such duplicate activities to assist the developer in coping with the ever increasing demand. The goal of my work is to improve the testing and maintenance of cross-platform web and mobile applications by developing automated techniques for comparing and matching the behavior of such applications across different platforms. To achieve this goal, I have identified three problems that are relevant in the context of cross-platform testing and maintenance: 1) automated identification of inconsistencies in the same application's behavior across multiple platforms, 2) detecting features that are present in the application on one platform, but missing on another platform version of the same application, and, 3) automated migration of test suites and possibly other software artifacts across platforms. I present three different scenarios for the development of {cross-platform} web and mobile applications, and formulate each of the three problems in the scenario where it is most relevant. To address and mitigate these problems in their corresponding scenarios, I present the principled design, development and evaluation of the two techniques, and a third preliminary technique to highlight the research challenges of test migration. The first technique, X-pert identifies inconsistencies in a web application running on multiple web browsers. The second technique, FMAP matches features between the desktop and mobile versions of a web application and reports any features found missing on either of the platform versions. The final technique, MigraTest attempts to automatically migrate test cases from a mobile application on one platform to its counterpart on another platform. To evaluate these techniques, I implemented them as prototype tools and ran these tools on real-world subject applications. The empirical evaluation of X-pert shows that it is accurate and effective in detecting real-world inconsistencies in web applications. In the case of FMAP, the results of my evaluation show that it was able to correctly identify missing features between desktop and mobile versions of the web applications considered, as confirmed by my analysis of user reports and software fixes for these applications. The third technique, MigraTest was able to efficiently migrate test cases between two mobile platform versions of the subject applications.},
	year={2014},
	database={Google Scholar}
}

@Article{
	title={Robust test automation using contextual clues},
	abstract={Despite the seemingly obvious advantage of test automation, significant skepticism exists in the industry regarding its cost-benefit tradeoffs. Test scripts for web applications are fragile: even small changes in the page layout can break a number of tests, requiring the expense of re-automating them. Moreover, a test script created for one browser cannot be relied upon to run on a different web browser: it requires duplicate effort to create and maintain versions of tests for a variety of browsers. Because of these hidden costs, organizations often fall back to manual testing.	We present a fresh solution to the problem of test-script fragility. Often, the root cause of test-script fragility is that, to identify UI elements on a page, tools typically record some metadata that depends on the internal representation of the page in a browser. Our technique eliminates metadata almost entirely. Instead, it identifies UI elements relative to other prominent elements on the page. The core of our technique automatically identifies a series of contextual clues that unambiguously identify a UI element, without recording anything about the internal representation. Empirical evidence shows that our technique is highly accurate in computing contextual clues, and outperforms existing techniques in its resilience to UI changes as well as browser changes.},
	year={2014},
	database={Google Scholar}
}

@Article{
	title={Browserbite: Accurate Cross-Browser Testing via Machine Learning over Image Features},
	abstract={Cross-browser compatibility testing is a time consuming and monotonous task. In its most manual form, Web testers open Web pages one-by-one on multiple browser-platform combinations and visually compare the resulting page renderings. Automated cross-browser testing tools speed up this process by extracting screenshots and applying image processing techniques so as to highlight potential incompatibilities. However, these systems suffer from insufficient accuracy, primarily due to a large percentage of false positives. Improving accuracy in this context is challenging as the criteria for classifying a difference as an incompatibility are to some extent subjective. We present our experience building a cross-browser testing tool (Browser bite) based on image segmentation and differencing in conjunction with machine learning. An experimental evaluation involving a dataset of 140 pages, each rendered in 14 browser-system combinations, shows that the use of machine learning in this context leads to significant accuracy improvement, allowing us to attain an F-score of over 90\%.},
	year={2013},
	database={IEEE Xplorer}
}

@Article{
	title={Incremental visual comparison of web browser screens},
	abstract={A method, media, and systems for performing incremental visual comparison of web browser screens are provided. Structured representations of a current state of an event-driven application are accessed, one with respect to a plurality of client-tier environments. Where the current state is not an initial state of the event-driven application, structured representations of a prior state of the event-driven application are accessed, with respect to each client-tier environment. A set of one or more pairwise equivalences between the current state and the prior state of the event-driven application are determined with respect to each client-tier environment. A set of one or more matched portions between the first and second sets of pairwise equivalences is determined. Finally, one or more differences in a first end-user experience in the first client-tier environment are determined with respect to a second end-user experience in the second client-tier environment.},
	year={2013},
	database={Google Scholar}
}

@Article{
	title={Masinõppel põhinev veebilehtede ühilduvusdiagnostika},
	abstract={Due to the rapid evolution of Web technologies and the failure of Web standards to uniformize every single technology evolution, Web developers are faced with the challenge of ensuring that their applications are correctly rendered across a broad range of browsers and platforms. While abidance to Web standards may reduce the chances of Web documents being inconsistently rendered across multiple browsers, in practice cross-browser compatibility issues are recurrent and range from minor layout bugs to critical functional failures such as a button being invisible in a given browser-platform combination. To detect cross-browser incompatibilities, developers often resort to visually checking that each document produced by their application is consistently rendered across all relevant browser-platform combinations. This manual testing approach is time consuming and error-prone. Existing cross-browser compatibility testing tools speed up this process by automating the rendering of a Web document in multiple browsers and platforms, and applying either image analysis or Document Object Model (DOM) analysis to highlight potential cross-browser incompatibilities. However, existing tools in this space suffer from over-sensitivity, meaning that they produce a large number of false positives as they tend to classify even insignificant differences as potential incompatibilities. Reducing the number of false positives produced by cross-browser compatibility testing tools is challenging, since defining criteria for classifying a difference as an incompatibility is to some extent subjective. This Master's thesis presents a machine learning approach to improve the accuracy of two techniques for cross-browser compatibility testing one based on image analysis (Browserbite) and one based on DOM analysis (Mogotest). To this end, we selected over 140 Web pages, each rendered in 10 to 14 browser-system combinations and built statistical classifiers to differentiate between true incompatibilities and false alarms. Two classification algorithms were used, namely classification trees and neural networks. An extensive experimental evaluation shows that neural networks produce highly accurate classifiers, both when post-processing the outputs of the image-based and the DOM-based technique. An attempt to combine image and DOM-based analysis is also reported.},
	year={2013},
	database={Google Scholar}
}

@Article{
	title={IE browser compatibility for web applications},
	abstract={Web browsing has evolved from the viewing of static, content-oriented web pages to the execution of dynamic applications over the web. This has initiated the problem of cross browser incompatibility from simple look and feel issues to critical functional failures. Internet Explorer (IE) is the most unpopular browser among the developers due to its lack of web standards compliance and peculiar features. However, it is the most leading choice in the market according to recent browser usage statistics. As a result, developers discover that the support of IE in the web applications is needed for satisfying the customers. However, providing such support is difficult as IE has certain restrictions in its features. This paper introduces cross browser compatibility, uncovers few of the idiosyncrasies of IE and provides solutions which can be useful in developing web applications with IE browser support.},
	year={2012},
	database={Google Scholar}
}

@Article{
	title={Cross Browser Incompatibility: Reasons and Solutions},
	abstract={A good Web site is more than just something to look at, it is functional interactive and flawless. As
	technologies are becoming smart so we need to be smarter enough to utilize them. With the rapid evolution
	of web technologies, the complexity of web applications has also grown up. Specially making a web
	application that works well with cross browser is a great challenge. Clearly, cross-browser means
	something works with all versions of all browsers to have existed since the web began. By this paper we
	have pointed out some reasons why applications behave or appear differently in different browsers because
	if you know the cause, you can get a solution.},
	year={2011},
	database={Google Scholar}
}

@Article{
	title={XCompatibility Checker: a tool for detecting cross-browser incompatibilities},
	abstract={Web browsers are built by different organizations and writing
	software that runs smoothly on all existing browsers is
	a challenging task. Due to the pace that browsers implement
	or adopt certain web features, users� experience may
	be hindered by visual and functional incompatibilities due
	to unsupported or non-standard features in a given browser.
	In order to address the detection of cross-browser incompatibilities
	in early stages of web development, we propose
	XCompatibility-Checker a lightweight tool that automates
	the identification of features that are not supported by different
	browsers. The tool�s evaluation was twofold (i) it
	was able to detect cross-browser incompatibilities in 38 open
	source web applications; as well as (ii) a user study and qualitative
	survey indicates that the tool improves developers�
	awareness and ability to detect cross-browser incompatibilities.
	Therefore, our proposed tool helps web developers
	improve the quality of their web applications.},
	year={},
	database={Google Scholar}
}